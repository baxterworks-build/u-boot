trigger:
  batch: false
  branches:
    include:
      - master
      - ci-*
  tags:
    include:
      - v*-ci

jobs:
- job: build_atf
  pool:
    vmImage: 'ubuntu-18.04'
  container: sigmaris/aarch64-linux-crossbuilder:latest
  steps:
  - script: |
      set -e
      git config --global user.name 'Build Robot'
      git config --global user.email 'noemail@example.com'
      git clone https://github.com/ARM-software/arm-trusted-firmware.git
      cd arm-trusted-firmware
      git checkout master
      git am ../atf-rk3399-baudrate.patch
      make realclean
      make -j$(getconf _NPROCESSORS_ONLN) CROSS_COMPILE=aarch64-linux-gnu- PLAT=rk3399 bl31
      cp build/rk3399/release/bl31/bl31.elf '$(Build.ArtifactStagingDirectory)'
    displayName: Build arm-trusted-firmware bl31.elf for rk3399 with 1.5Mbps baudrate patch
  - task: PublishBuildArtifacts@1
    displayName: 'Publish arm-trusted-firmware bl31.elf'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/bl31.elf'
      artifactName: atf
- job: build_uboot
  dependsOn: build_atf
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-18.04'
  container: sigmaris/aarch64-linux-crossbuilder:latest
  strategy:
    maxParallel: 2
    matrix:
      spi:
        defconfig: rockpro64-rk3399-spi_defconfig
        img1type: rkspi
        img1name: spi_idbloader.img
        img2name: spi_u-boot.itb
        artifact: spi_u-boot
      mmc:
        defconfig: rockpro64-rk3399_defconfig
        img1type: rksd
        img1name: mmc_idbloader.img
        img2name: mmc_u-boot.itb
        artifact: mmc_u-boot
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: atf
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - script: |
      set -e
      export BL31="$(realpath $(System.DefaultWorkingDirectory)/atf/bl31.elf)"
      make mrproper
      make $(defconfig)
      make -j$(getconf _NPROCESSORS_ONLN) CROSS_COMPILE=aarch64-linux-gnu-
      tools/mkimage -n rk3399 -T $(img1type) -d tpl/u-boot-tpl.bin:spl/u-boot-spl.bin $(img1name)
      cp $(img1name) '$(Build.ArtifactStagingDirectory)'
      cp u-boot.itb '$(Build.ArtifactStagingDirectory)/$(img2name)'
    displayName: Build u-boot
  - script: |
      set -e
      padsize=393215
      img1size=$(wc -c <"$(img1name)")
      [ $img1size -le $padsize ] || exit 1
      dd if=/dev/zero of=$(img1name) conv=notrunc bs=1 count=1 seek=$padsize
      cat $(img1name) u-boot.itb > '$(Build.ArtifactStagingDirectory)/spi_combined.img'
      tools/mkimage -C none -A arm -T script -d scripts/flash_spi.cmd '$(Build.ArtifactStagingDirectory)/flash_spi.scr'
    displayName: Create single SPI image with u-boot.itb at 0x60000 (393216)
    condition: eq(variables['img1type'], 'rkspi')
  - task: PublishBuildArtifacts@1
    displayName: 'Publish idbloader.img and u-boot.itb'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifact)'
- job: spi_flash_img
  dependsOn:
  - build_uboot
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-18.04'
  container: sigmaris/aarch64-linux-crossbuilder:latest
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download mmc_u-boot artifacts'
    inputs:
      artifactName: mmc_u-boot
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - task: DownloadBuildArtifacts@0
    displayName: 'Download spi_u-boot artifacts'
    inputs:
      artifactName: spi_u-boot
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - script: |
        set -e
        cp '$(System.DefaultWorkingDirectory)/spi_u-boot/flash_spi.scr' boot.scr
        cp '$(System.DefaultWorkingDirectory)/spi_u-boot/spi_combined.img' spi_combined.img
        dd if=/dev/zero of=boot.tmp bs=1M count=16
        mkfs.vfat -n u-boot-script boot.tmp
        mcopy -sm -i boot.tmp boot.scr ::
        mcopy -sm -i boot.tmp spi_combined.img ::
        dd if=/dev/zero of=flash_spi.img bs=1M count=32
        parted -s flash_spi.img mklabel gpt
        parted -s flash_spi.img unit s mkpart loader1 64 8063
        parted -s flash_spi.img unit s mkpart loader2 16384 24575
        parted -s flash_spi.img unit s mkpart boot fat16 24576 100%
        parted -s flash_spi.img set 3 legacy_boot on
        dd if='$(System.DefaultWorkingDirectory)/mmc_u-boot/mmc_idbloader.img' of=flash_spi.img conv=notrunc seek=64
        dd if='$(System.DefaultWorkingDirectory)/mmc_u-boot/mmc_u-boot.itb' of=flash_spi.img conv=notrunc seek=16384
        dd if=boot.tmp of=flash_spi.img conv=notrunc seek=24576
        gzip flash_spi.img
    displayName: Create SD card image to flash u-boot to SPI
  - task: PublishBuildArtifacts@1
    displayName: Publish SD card image to flash u-boot to SPI
    inputs:
      pathToPublish: flash_spi.img.gz
      artifactName: spi_u-boot
- job: github_release
  dependsOn:
  - spi_flash_img
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), endsWith(variables['Build.SourceBranch'], '-ci'))
  pool:
    vmImage: 'ubuntu-18.04'
  container: sigmaris/aarch64-linux-crossbuilder:latest
  steps:
  - checkout: none  #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download mmc_u-boot artifacts'
    inputs:
      artifactName: mmc_u-boot
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - task: DownloadBuildArtifacts@0
    displayName: 'Download spi_u-boot artifacts'
    inputs:
      artifactName: spi_u-boot
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - script: |
      cp $(System.DefaultWorkingDirectory)/mmc_u-boot/* $(System.DefaultWorkingDirectory)/spi_u-boot/* '$(Build.ArtifactStagingDirectory)'
    displayName: Copy build artifacts to staging directory
  - task: GithubRelease@0
    displayName: 'Create Github release with assets'
    inputs:
      gitHubConnection: sigmaris_token
      repositoryName: sigmaris/u-boot
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: 'rockpro64 u-boot $(Build.SourceBranchName)'
      assets: '$(Build.ArtifactStagingDirectory)/*'
